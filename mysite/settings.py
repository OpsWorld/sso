#coding=utf-8

"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 1.9.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

#from mysite.comm import BASE_DIR,LDAP_URI,LDAP_USER,LDAP_PASS,BASE_DN

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

#系统API地址
SYS_API = 'http://yun.ops.hhr.com'

#salt_deploy
SCRIPT_DIR = '/srv/salt'

#分页
PAGE_LIMIT = 20

#Log
LOG_LEVEL = 'debug'
LOG_DIR = os.path.join(BASE_DIR, 'logs')

#sso
#是否显示验证码
SHOW_CAPTCHA = True
#忘记密码重置和修改密码URL
PASSWD_URL = 'http://ssp.ops.hhr.com/index.php?action=sendtoken'
LOGIN_URL = 'http://sso.ops.hhr.com/sso/login/'
GET_USER_URL = 'http://sso.ops.hhr.com/sso/get_user/'
COOKIE_EXPIRES = 3600

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '7h+$-x9zhdv-ufan#q9vp=zdil#03%fn&!-jltamn=izs1yxrz'

ALLOWED_HOSTS = []

#email
ADMINS = (
    ('admin', 'admin@example.com'),
)
DEFAULT_FROM_EMAIL = SERVER_EMAIL = ''
EMAIL_HOST = 'smtp.exmail.qq.com'
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
EMAIL_PORT = 465
EMAIL_SUBJECT_PREFIX = '[] '
#EMAIL_USE_TLS = False
EMAIL_USE_SSL = True


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'sso',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'mysite/templates').replace('\\','/')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.core.context_processors.i18n',
                'django.core.context_processors.media',
                'django.core.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
#use mysql
#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.mysql',
#        'NAME': 'workflow',
#        'USER': 'root',
#        'PASSWORD': '',
#        'HOST': 'localhost',
#        'PORT': 3306,
#    }
#}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'zh-CN'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = False

USE_TZ = False

DATETIME_FORMAT = 'Y-m-d H:i:s'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'mysite/static/').replace('\\','/'),
)

DEBUG=True
LOGGING = {
'version': 1,
'disable_existing_loggers': True,
'formatters': {
    'standard': {
        'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'}  #日志格式
},
'filters': {
},
'handlers': {
    'mail_admins': {
        'level': 'ERROR',
        'class': 'django.utils.log.AdminEmailHandler',
        'include_html': True,
        },
    'default': {
        'level':'DEBUG',
        'class':'logging.handlers.RotatingFileHandler',
        'filename':  os.path.join(BASE_DIR + '/logs/','all.log'),
        'maxBytes': 1024*1024*5,                  #文件大小
        'backupCount': 5,                         #备份份数
        'formatter':'standard',                   #使用哪种formatters日志格式
    },
    'error': {
        'level':'ERROR',
        'class':'logging.handlers.RotatingFileHandler',
        'filename':  os.path.join(BASE_DIR + '/logs/','error.log'),
        'maxBytes':1024*1024*5,
        'backupCount': 5,
        'formatter':'standard',
        },
    'console':{
        'level': 'INFO',
        'class': 'logging.StreamHandler',
        'formatter': 'standard'
    },
    'request_handler': {
        'level':'DEBUG',
        'class':'logging.handlers.RotatingFileHandler',
        'filename':  os.path.join(BASE_DIR + '/logs/','request.log'),
        'maxBytes': 1024*1024*5,
        'backupCount': 5,
        'formatter':'standard',
        },
    'scprits_handler': {
        'level':'DEBUG',
        'class':'logging.handlers.RotatingFileHandler',
        'filename':  os.path.join(BASE_DIR + '/logs/','script.log'),
        'maxBytes': 1024*1024*5,
        'backupCount': 5,
        'formatter':'standard',
        }
},
'loggers': {
    'django': {
        'handlers': ['default', 'console'],
        'level': 'INFO',
        'propagate': False
    },
    'django.request': {
        'handlers': ['request_handler'],
        'level': 'DEBUG',
        'propagate': False,
        },
    'scripts': {
        'handlers': ['scprits_handler'],
        'level': 'INFO',
        'propagate': False
    },
    'salt_deploy': {
        'handlers': ['default','mail_admins'],
        'level': 'INFO',
        'propagate': True
    },
  }
}
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'

#session config
#SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_COOKIE_AGE = 86400  # 设置session有效期为一天,默认两周
#SESSION_COOKIE_DOMAIN = ".xxx.com"
#SESSION_COOKIE_NAME = "xxx"
#CACHES = {
#    'default': {
#        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
#        'LOCATION': [
#            MC_HOST,
#            MC_HOST,
#        ],
#        'TIMEOUT': 60 * 15,  # 缓存默认过期时间
#        'OPTIONS': {
#            'MAX_ENTRIES': 3000  # 最大缓存个数
#        }
#    }
#}

#ldap
#LDAP_URI = 'ldap://ldap.xxxx.xxx:389'
#LDAP_USER = 'cn=workflow,dc=xxx,dc=xxx'
#LDAP_PASS = 'workflow@2017'
#BASE_DN = 'dc=xxx,dc=xxx'
#DN_FLAG = 'cn'
#
#import ldap
#from django_auth_ldap.config import LDAPSearch,PosixGroupType,GroupOfUniqueNamesType
#AUTHENTICATION_BACKENDS = (
#    'django_auth_ldap.backend.LDAPBackend',
#    'django.contrib.auth.backends.ModelBackend',
#)
#AUTH_LDAP_SERVER_URI = LDAP_URI
#AUTH_LDAP_BIND_DN = LDAP_USER
#AUTH_LDAP_BIND_PASSWORD = LDAP_PASS
#AUTH_LDAP_USER_DN_TEMPLATE = "cn=%(user)s,ou=People," + BASE_DN
#AUTH_LDAP_GROUP_SEARCH = LDAPSearch("ou=Group," + BASE_DN,
#    ldap.SCOPE_SUBTREE, "(objectClass=groupOfUniqueNames)"
#)
#AUTH_LDAP_GROUP_TYPE = GroupOfUniqueNamesType()
#AUTH_LDAP_USER_ATTR_MAP = {
#    "first_name": "givenName",
#    "last_name": "sn",
#     "email": "mail"
#}
#AUTH_LDAP_MIRROR_GROUPS=True #注意 此为重点：当这个值为 True， LDAP的用户条目映射并创建 Django User 的时候，会自动映创建Group 
##AUTH_LDAP_ALWAYS_UPDATE_USER = True #是否每次都从LDAP 把用户信息 更新到 Django 的User 
##AUTH_LDAP_FIND_GROUP_PERMS = True #如果为True， LDAPBackend将提供基于LDAP组身份验证的用户属于的组的权限 
##AUTH_LDAP_CACHE_GROUPS = True #如果为True，LDAP组成员将使用Django的缓存框架。 
##AUTH_LDAP_GROUP_CACHE_TIMEOUT = 1800 #缓存时长 
